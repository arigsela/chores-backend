# .github/workflows/pr-checks.yml
name: PR Checks
on:
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: chores_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx requests  # Added requests

    - name: Build and run application container
      run: |
        docker build -t chores-app .
        CONTAINER_ID=$(docker run -d \
          -e DB_HOST=127.0.0.1 \
          -e DB_USER=root \
          -e DB_PASSWORD=test_password \
          -e DB_NAME=chores_db \
          -p 8000:8000 \
          --network host \
          chores-app)
        echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV
        sleep 5
        docker logs $CONTAINER_ID

    - name: Check container status
      run: |
        echo "Container status:"
        docker ps -a
        echo "Container logs:"
        docker logs ${{ env.CONTAINER_ID }}

    - name: Wait for application to be ready
      run: |
        timeout 30 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8000/health)" != "200" ]]; do sleep 2; done' || false

    - name: Run integration tests
      env:
        API_BASE_URL: http://localhost:8000
        DB_HOST: 127.0.0.1
        DB_USER: root
        DB_PASSWORD: test_password
        DB_NAME: chores_db
        DB_PORT: 3306
      run: |
        pytest app/integration_tests -v

    # Add cleanup step
    - name: Cleanup
      if: always()
      run: |
        docker logs ${{ env.CONTAINER_ID }} || true
        docker stop ${{ env.CONTAINER_ID }} || true
        docker rm ${{ env.CONTAINER_ID }} || true